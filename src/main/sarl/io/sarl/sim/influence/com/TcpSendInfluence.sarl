/** 
 * 
 */
package io.sarl.sim.influence.com

import io.sarl.sim.utils.Vector3D
import io.sarl.sim.influence.ActionInfluence
import io.sarl.sim.influence.PhysicalInfluence
import java.net.InetAddress
import java.net.Socket

/** 
 * Allows sending influences through TCP protocol.
 * @author Alexandre Lombard
 */
skill TcpSendInfluence implements SendInfluence {
	
	/** The IP address (currently hard-coded) */
	val ipAddress = InetAddress.getByName("127.0.0.1")
	
	/** The TCP port (currently hard-coded) */
	val port = 4242
	
	var socket: Socket

	def install {
		synchronized (this) {
			this.socket = new Socket(ipAddress, port)			
		}
	}

	def uninstall {
		synchronized (this) {
			this.socket.close
		}
	}
	
	def sendInfluence(force : Vector3D) {
		sendPhysicalInfluence(force, new Vector3D(), new Vector3D())
	}
	
	def sendPhysicalInfluence(force: Vector3D, forceLocation: Vector3D, angularForce: Vector3D) {
		val influence = new PhysicalInfluence(ID, force, forceLocation, angularForce)
		val buffer = influence.toByteArray
		
		synchronized(this) {
			this.socket.outputStream.write(buffer)
		}
	}
	
	def sendActionInfluence(actionType: String, target: String, position: Vector3D) {
		val influence = new ActionInfluence(ID, actionType, target, position)
		val buffer = influence.toByteArray

		synchronized (this) {
			this.socket.outputStream.write(buffer)
		}
	}
	
}
