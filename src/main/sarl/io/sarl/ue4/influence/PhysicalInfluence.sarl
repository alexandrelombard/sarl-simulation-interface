package io.sarl.ue4.influence

import io.sarl.ue4.Vector3D
import java.util.UUID
import java.nio.ByteBuffer

import static extension io.sarl.ue4.SerializerExtensions.putString
import static extension io.sarl.ue4.SerializerExtensions.putVector

import static io.sarl.ue4.SerializerExtensions.sizeOfString
import static io.sarl.ue4.SerializerExtensions.sizeOfVector

/** 
 * Represents a physical influence of an agent over its attached body
 * @author Alexandre Lombard
 */
class PhysicalInfluence extends Influence {
	
	static val PHYSICAL_INFLUENCE = "0101" 
	
	public val force : Vector3D
	public val forceLocation : Vector3D
	public val angularForce : Vector3D
	
	/** 
	 * Build a physical influence: an influence is a force in Newton (kg.m/s2). It's similar to an acceleration, except that the effect
	 * of the mass will be applied by the simulation engine.
	 * @param id the source of the influence (the ID of the agent)
	 * @param force the vector representing the influence on the world
	 * @param forceLocation the vector indicating the position where the force will be applied
	 * @param angularForce the angular force
	 */
	new (id : UUID, force : Vector3D, forceLocation : Vector3D, angularForce : Vector3D) {
		super(id)
		this.force = force 
		this.forceLocation = forceLocation
		this.angularForce = angularForce
	}

	/** Custom serialization
	 */
	def toByteArray() : byte[] {
		val idStr = id.toString
		val byteBuffer =
			ByteBuffer.allocate(
				sizeOfString(PHYSICAL_INFLUENCE) +
				sizeOfString(idStr) +
				3 * sizeOfVector())

		byteBuffer.putString(PHYSICAL_INFLUENCE)
		byteBuffer.putString(idStr)
		byteBuffer.putVector(force)
		byteBuffer.putVector(forceLocation)
		byteBuffer.putVector(angularForce)

		return byteBuffer.array
	}

}
