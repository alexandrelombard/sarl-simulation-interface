/** 
 * 
 */
package io.sarl.ue4.perception

import io.sarl.ue4.Vector3D
import java.nio.ByteBuffer
import java.util.UUID
import java.util.List
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Represents a list of perceptions (i.e. a perception for a single body)
 * @author Alexandre Lombard
 * 
 */
class PerceptionList extends Object {
	
	@Accessors(PUBLIC_GETTER)
	val id : UUID
	@Accessors(PUBLIC_GETTER)
	val perceptions: List<Vector3D>
	
	new(id : UUID, perceptions : List<Vector3D>) {
		this.id = id
		this.perceptions = perceptions
	}
	
	/**
	 * De-serialize a list of perceptions from a byte array
	 * @param b the byte array
	 * @return the list of perceptions
	 */
	static def fromByteArray(b: byte[]) : PerceptionList {
		val byteBuffer = ByteBuffer.wrap(b);
		
		// Parse the ID
		val idLength = byteBuffer.int
		val idBuffer = newByteArrayOfSize(idLength)
		byteBuffer.get(idBuffer)
		
		val id = UUID.fromString(new String(idBuffer))
		
		// Parse the perceptions
		val perceptionsCount = byteBuffer.int
		val perceptions = newArrayList
		val floatBuffer = byteBuffer.asFloatBuffer
		
		for(var i = 0; i < perceptionsCount; i++) {
			val x = floatBuffer.get.doubleValue
			val y = floatBuffer.get.doubleValue
			val z = floatBuffer.get.doubleValue
			
			perceptions.add(new Vector3D(x, y, z))
		}
		
		new PerceptionList(id, perceptions)
	}
	
}
