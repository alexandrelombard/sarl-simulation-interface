/** 
 * 
 */
package io.sarl.ue4

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions
import io.sarl.ue4.perception.PerceptionsDispatcher
import io.sarl.ue4.simulation.SimulationControllerAgent

/** 
 * Starts all agents able to influence the world
 * @author Alexandre Lombard
 * 
 */
agent BootAgent {
	uses Logging, Lifecycle, DefaultContextInteractions, Schedules

	on Initialize {
		// Parameters
		var agentsCount = 500
		
		// Reading parameters
		if (occurrence.parameters.length > 0) {
			val countParameter = (occurrence.parameters.get(0))
			agentsCount = Integer.parseInt(countParameter.toString)
		}
		
		// Spawning the perception dispatcher
		info("Spawning the perception dispatcher...")
		spawn(PerceptionsDispatcher)
		
		// Spawning the agents with bodies
		//info("Spawning simulated agents (" + agentsCount + ")...")
		
		//for (var idx = 0; idx < agentsCount; idx++) {
		//	spawn(SimulatedAgent)		
		//}
		
		spawn(SimulationControllerAgent)
		
		// Starting simulation
		//info("Starting simulation...")
	}
}
