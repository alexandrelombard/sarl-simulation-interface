/** 
 * 
 */
package io.sarl.ue4

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.ue4.influence.com.SendInfluence
import io.sarl.ue4.influence.com.UdpSendInfluence
import io.sarl.ue4.perception.PerceptionsReceived
import io.sarl.ue4.influence.InfluenceEvent
import io.sarl.core.DefaultContextInteractions

/** 
 * Agent able to send influences on the world
 * @author Alexandre Lombard
 * 
 */
agent SimulatedAgent {
	uses Logging, SendInfluence, DefaultContextInteractions

	var direction = new Vector3D()

	on Initialize {
		setSkill(new UdpSendInfluence, SendInfluence)
		
		// sendInfluence(direction)	// TODO Temporarily used (needed to trigger the spawn in UE4)
	}
	
	on PerceptionsReceived {
		var to = new Vector3D(0.0, 0.0, 0.0)

		if (occurrence.perceptionList.perceptions.size > 0)
		{
			// Average position
			for (v : occurrence.perceptionList.perceptions)
					to = to + v
				to = to * (1.0 / occurrence.perceptionList.perceptions.size)

			to = to / to.length // Normalize
			
			// to = to * -1.0		// Invert
			to = to * 1.0 			// Scale	
		}
		
		sendInfluence(to)

		emit(new InfluenceEvent)

		info("New direction: " + to)
	}
	
}